server:
  port: 10032

spring:
  application:
    name: robella
  profiles:
    default: postgres
  # 数据源配置现在拆分在 application-postgres.yml 和 application-sqlite.yml 中，
  # 通过设置 SPRING_PROFILES_ACTIVE 选择数据库类型。
  # 启用虚拟线程
  threads:
    virtual:
      enabled: true

  # 文件上传配置 (MVC)
  servlet:
    multipart:
      max-file-size: 256MB
      max-request-size: 256MB

  # Jackson 配置
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false

  # 数据库初始化配置
  sql:
    init:
      mode: never  # 禁用自动初始化，改为手动执行 schema.sql 和 data.sql

# MyBatis-Plus 配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: classpath*:/mapper/**/*.xml

# 应用特定配置
robella:
  okhttp:
    # 连接池配置
    connection-pool:
      max-idle-connections: 50
    # 超时配置
    timeout:
      connect: 10s
      read: 60s
      write: 30s
      call: 30000s
    # 重试配置
    retry:
      enabled: true
      max-attempts: 3
      initial-delay: 1s
      max-delay: 10s
    # 缓冲区配置
    buffer:
      max-in-memory-size: 32MB
      enable-logging: true
  # 负载均衡配置
  loadbalancer:
    strategy: HYBRID_WEIGHTED  # 负载均衡策略: ROUND_ROBIN, RANDOM, HYBRID_WEIGHTED


logging:
  level:
    org.elmo.robella: DEBUG
    org.springframework.web: DEBUG
    com.baomidou.mybatisplus: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/robella.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30
# Sa-Token配置
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: satoken
  # token有效期 (单位: 秒) 默认30天, -1代表永不过期
  timeout: 2592000
# token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: uuid
  # 是否输出操作日志
  is-log: true

# GitHub OAuth配置
github:
  oauth:
    client-id: ${GITHUB_CLIENT_ID}
    client-secret: ${GITHUB_CLIENT_SECRET}
    redirect-uri: ${GITHUB_REDIRECT_URI:http://localhost:10032/api/oauth/github/callback}
    scope: user:email,read:user
    auth-url: https://github.com/login/oauth/authorize
    token-url: https://github.com/login/oauth/access_token
    user-url: https://api.github.com/user
